--SELECTING ALL TABLES (CUSTOMER, SALES, PRODUCT) UPLOADED USING THE LIMIT FUNCTION 

select * from customer_table LIMIT 300
SELECT * FROM SALES_TABLE LIMIT 200
SELECT * FROM PRODUCT_TABLE LIMIT 100

/*SELECTING TABLES USING THE DISTINCT KEYWORD IN SQL TO ELIMINATE DUPLICATE
VALUES AND WRITING A SYTANX TO SELECT MULTIPLE COLUMNS IN A TABLE*/

SELECT DISTINCT CUSTOMER_NAME, CUSTOMER_ID, SEGMENT FROM CUSTOMER_TABLE

SELECT DISTINCT ORDER_ID, CUSTOMER_ID,PRODUCT_ID FROM SALES_TABLE

--USING LOGICAL OPERATORS (AND, OR,) IN SQL

--TEST

/* WRITE A SYNTAX TO GET THE CUSTOMER NAME AND AGE OF CUSTOMERS WITH THE CONDITION THAT 
CUSTOMER'S AGE IS WITHIN 20 AND 30 IN THE CUSTOMER TABLE*/
SELECT CUSTOMER_NAME, AGE FROM CUSTOMER_TABLE WHERE AGE >= 20 AND AGE >= 30 LIMIT 20

--USING THE UPDATE FUNCTION IN SQL

--TEST: UPDATE THE AGE OF THE CUSTOMER WITH CUSTOMER ID  "LT-17110" FROM 51 TO 31
 
UPDATE CUSTOMER_TABLE SET AGE = 31 WHERE CUSTOMER_ID = 'LT-17110'
 
--TO VIEW THE UPDATE

 SELECT * FROM CUSTOMER_TABLE WHERE CUSTOMER_ID = 'LT-17110'
 
--SYNTAX FOR DELETING A TABLE

--TEST: DELETE THE DATA OF THE CUSTOMER WITH CUSTOMER_ID = 'LT-17110'

DELETE FROM CUSTOMER_TABLE WHERE CUSTOMER_ID = 'LT-17110'; 

/*CHANGING THE STRUCTURE OF A TABLE USING CONSTRAINTS

TEST: ADD ANOTHER COLUMNM- DATE OF BIRTH- , DROP THE COLUMN, )*/

--ADDING THE COLUMN

ALTER TABLE CUSTOMER_TABLE ADD DOB DATE 

SELECT * FROM CUSTOMER_TABLE LIMIT 5

--DROPING THE COLUMN

ALTER TABLE CUSTOMER_TABLE DROP DOB

SELECT * FROM CUSTOMER_TABLE

--USING THE IN CONDITION 

--TEST: USE THE IN CONDITION TO PRINT OUT CUSTOMERS IN 'Henderson', 'Fort Lauderdale', 'Los Angeles'

SELECT * FROM CUSTOMER_TABLE WHERE CITY IN ('Henderson', 'Fort Lauderdale', 'Los Angeles' )


--WILDCARDS WILDCARDS IN SQL 

/*TEST: PRINT OUT THE CUSTOMERS WITH LETTER A STARTING AND ENDING THEIR NAME,
CUSTOMER THAT HAS NELSON IN HIS NAME 
CUSTOMERS WITH 4 LETTERS FIRST NAMES
HOW TO BYPASS THE % SYMBOL WHILE USING THE LIKE SYMBOL*/ 


SELECT * FROM CUSTOMER_TABLE WHERE CUSTOMER_NAME LIKE 'A%'

SELECT * FROM CUSTOMER_TABLE WHERE CUSTOMER_NAME LIKE '%A'

SELECT *  FROM CUSTOMER_TABLE WHERE CUSTOMER_NAME LIKE '%Nelson'

SELECT *  FROM CUSTOMER_TABLE WHERE CUSTOMER_NAME LIKE '____ %'

SELECT * FROM CUSTOMER_TABLE WHERE CUSTOMER_NAME LIKE 'G\%'


--ORDERING DATE IN SQL

--TEST: ORDER THE SALES TABLE BY CUSTOMERS WITH HIGHEST ORDERS

SELECT * FROM SALES_TABLE ORDER BY SALES DESC 

--USING ALIAS IN SQL 
SELECT CUSTOMER_ID AS "CUSTOMER DETAILS", ORDER_ID, PRODUCT_ID AS "PRODUCT PRUCHASED IDENTITY "
FROM SALES_TABLE

--MATHEMATICAL FUNCTIONS IN SQL

--COUNT FUNCTION
 SELECT COUNT (CUSTOMER_ID) FROM CUSTOMER_TABLE
 
 --SUM FUNCTION WITH GROUP FUNCTION 
 
 SELECT CUSTOMER_ID, SUM (SALES) AS "TOATAL SALES" FROM SALES_TABLE GROUP BY CUSTOMER_ID
 ORDER BY "TOATAL SALES" DESC 
 
 -- AVERAGE FUNCTION WITH GROUP FUNCTION 
SELECT CUSTOMER_ID, AVG (SALES) AS "AVERAGE AMOUNT SPENT" FROM SALES_TABLE GROUP BY CUSTOMER_ID 
ORDER BY "AVERAGE AMOUNT SPENT" DESC 

--MIN AND MAX FUNCTION WITH GROUP FUNCTION 

SELECT CUSTOMER_ID, MAX (SALES) AS "MAXIMUM AMOUNT SPENT", 
MIN (SALES) AS "MINIMUM AMOUNT SPENT" FROM SALES_TABLE GROUP BY CUSTOMER_ID

-- USING THE CASE FUNCTION IN SQL TO GIVE REMARKS TO CUSTOMERS BASED ON PURCHASES AMOUNT
SELECT CUSTOMER_ID, SALES, CASE WHEN SALES BETWEEN 0 AND 1000 THEN 'LOWEST PAYING CUSTOMER' 
WHEN SALES BETWEEN 1000 AND 10000 THEN 'AVEARGE PAYING CUSTOMER' ELSE 'HIGHEST PAYING CUSTOMER'
END AS CUSTOMER_REMARK FROM SALES_TABLE ORDER BY CUSTOMER_ID
--USING JOINS IN SQL

/*FIRSTLY WE WOULD LIKE TO CREATE A TABLE OF SALES IN 2015 AND A TABLE OF 
CUSTOMERS WITHIN THE AGE RANGE OF 20 AND 60*/

--CREATING THE SALES 2015 TABLE
CREATE TABLE SALES_2015 AS SELECT * FROM SALES_TABLE WHERE SHIP_DATE BETWEEN '2015-01-01'
AND '2015-12-31' 

SELECT * FROM SALES_2015

--CREATING THE CUSTOMER AGE WITHIN THE RANGE 20 - 60
CREATE TABLE CUSTOMER_20_60 AS SELECT * FROM CUSTOMER_TABLE WHERE AGE BETWEEN 20 AND 60

SELECT * FROM CUSTOMER_20_60

--JOINING THE 2 TABLES 
--INNER JOIN
SELECT A.ORDER_LINE, A.PRODUCT_ID,A.CUSTOMER_ID, A.SALES,
		B.CUSTOMER_NAME, B.AGE FROM SALES_2015  AS A INNER JOIN CUSTOMER_20_60 AS B 
		ON A.CUSTOMER_ID = B.CUSTOMER_ID ORDER BY CUSTOMER_ID
		
--LEFT JOIN
SELECT A.ORDER_LINE, A.PRODUCT_ID,A.CUSTOMER_ID, A.SALES,
		B.CUSTOMER_NAME, B.AGE FROM SALES_2015  AS A LEFT JOIN CUSTOMER_20_60 AS B 
		ON A.CUSTOMER_ID = B.CUSTOMER_ID ORDER BY CUSTOMER_ID
		
--RIGHT JOIN
SELECT A.ORDER_LINE, A.PRODUCT_ID,A.CUSTOMER_ID, A.SALES,
		B.CUSTOMER_NAME, B.AGE FROM SALES_2015  AS A RIGHT JOIN CUSTOMER_20_60 AS B 
		ON A.CUSTOMER_ID = B.CUSTOMER_ID ORDER BY CUSTOMER_ID
		
--FULL JOIN 
SELECT A.ORDER_LINE, A.PRODUCT_ID,A.CUSTOMER_ID, A.SALES,
		B.CUSTOMER_NAME, B.AGE, B.CUSTOMER_ID FROM SALES_2015  AS A FULL JOIN CUSTOMER_20_60 AS B 
		ON A.CUSTOMER_ID = B.CUSTOMER_ID ORDER BY A.CUSTOMER_ID, B.CUSTOMER_ID


--USING INTERCEPT, EXCEPT AND UNION OPERATORS
--USING THE NEWLY CREATED SALES_2015 AND CUSTOMER_20_60 TABLE 

--UNION
SELECT CUSTOMER_ID FROM SALES_TABLE 
UNION SELECT CUSTOMER_ID FROM CUSTOMER_20_60

--INTESECT 
SELECT CUSTOMER_ID FROM SALES_TABLE 
INTERSECT  SELECT CUSTOMER_ID FROM CUSTOMER_20_60

--EXCEPT OPERATOR
SELECT CUSTOMER_ID FROM SALES_TABLE 
EXCEPT  SELECT CUSTOMER_ID FROM CUSTOMER_20_60

--SUBQUERIES EXAMPLES

SELECT ORDER_ID, CUSTOMER_ID, (SELECT CUSTOMER_NAME FROM CUSTOMER_TABLE 
							   WHERE SALES_TABLE.CUSTOMER_ID = CUSTOMER_TABLE.CUSTOMER_ID)
							   FROM SALES_TABLE ORDER BY CUSTOMER_ID
							   
SELECT A.PRODUCT_ID, A.PRODUCT_NAME, A.CATEGORY,B.QUANTITY FROM  PRODUCT_TABLE AS A LEFT JOIN 
			(SELECT PRODUCT_ID, SUM (QUANTITY) AS QUANTITY FROM SALES_TABLE GROUP BY PRODUCT_ID )
			AS B ON  A.PRODUCT_ID = B.PRODUCT_ID ORDER BY QUANTITY DESC 
			 

--CREATING VIEW ON SQL 					
--TEST: CREATE A VIEW FOR THE ACCOUNT OFFICER TO TRACK SALES MADE


CREATE VIEW ACCOUNT_OFFICER AS 
(SELECT SALES, QUANTITY, DISCOUNT, PROFIT FROM SALES_TABLE)

SELECT * FROM ACCOUNT_OFFICER

SELECT SUM (SALES), SUM (QUANTITY), SUM (DISCOUNT), SUM (PROFIT) FROM ACCOUNT_OFFICER


--USING THE LENGHT FUNCTION IN SQL
SELECT CUSTOMER_NAME, LENGTH (CUSTOMER_NAME) AS LENGTH_OF_CUSTOMER_NAMES FROM
CUSTOMER_TABLE  WHERE LENGTH (CUSTOMER_NAME) > 10


--USING THE REPLACE FUNCTION IN SQL

SELECT CUSTOMER_NAME, COUNTRY, REPLACE (UPPER(COUNTRY), 'UNITED STATES', 'US') AS NEW_COUNTRIES_NAME
FROM CUSTOMER_TABLE;

--STRING CONCATENATION IN SQL 

SELECT CUSTOMER_ID, CUSTOMER_NAME, CITY || ', ' || STATE || ', ' || COUNTRY AS ADDRESS 
FROM CUSTOMER_TABLE


--USING SUBSTRING IN SQL 

SELECT CUSTOMER_ID, CUSTOMER_NAME, SUBSTRING (CUSTOMER_ID FOR 2) AS CUSTOMER_GROUP FROM CUSTOMER_TABLE

--LIST AGGREGATION IN SQL  

--TEST: LIST AGGREGATE ALL PRODUCTS PURCHASED ON EACH ORDER_ID AND SUBQUERING IT WITH A COLUMN IN ANOTHER TABLE

SELECT ORDER_ID, CUSTOMER_ID, 
(SELECT CUSTOMER_NAME FROM CUSTOMER_TABLE WHERE CUSTOMER_TABLE.CUSTOMER_ID = SALES_TABLE.CUSTOMER_ID) , 
 STRING_AGG (PRODUCT_ID, ', ') AS "ALL PRODUCT PURCHASED" 
FROM SALES_TABLE 
GROUP BY ORDER_ID, CUSTOMER_ID

--USING THE EXTRACT 

--EXTRACT THE DIFFERENCE BETWEEN SHIP DATE AND ORDER DATE 


SELECT ORDER_DATE, (EXTRACT (EPOCH FROM SHIP_DATE) - EXTRACT (EPOCH FROM ORDER_DATE) / (60*60*24))
AS "DIFFERENCE BETWEEN SHIP AND ORDER DATE" FROM SALES_TABLE
